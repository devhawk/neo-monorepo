<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Copyright>2015-2021 The Neo Project</Copyright>
    <AssemblyTitle>Neo.Compiler.MSIL</AssemblyTitle>
    <VersionPrefix>3.0.0</VersionPrefix>
    <VersionSuffix>preview5</VersionSuffix>
    <Authors>The Neo Project</Authors>
    <TargetFramework>net5.0</TargetFramework>
    <OutputType>Exe</OutputType>
    <AssemblyName>neon</AssemblyName>
    <PackageTags>NEO;Blockchain;Smart Contract;Compiler</PackageTags>
    <PackageProjectUrl>https://github.com/neo-project/neo-devpack-dotnet</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/neo-project/neo-devpack-dotnet.git</RepositoryUrl>
    <RootNamespace>Neo.Compiler</RootNamespace>
    <Company>The Neo Project</Company>
    <Product>Neo.Compiler.MSIL</Product>
    <Description>Neo.Compiler.MSIL</Description>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!--
    https://johan-v-r.github.io/2018/09/05/NET-Core-Global-Tools-Configuration/
      `dotnet pack` to build .NET Core 3.1 global tool
      `dotnet pack /p:SharedLibrary=true` to build .NET Standard 2.0 library package
  -->

  <PropertyGroup Condition="'$(SharedLibrary)' != true">
    <PackageId>Neo.Neon</PackageId>
    <PackAsTool>true</PackAsTool>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SharedLibrary)' == true">
    <PackageId>Neo.Compiler.MSIL</PackageId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CommandLineParser" Version="2.8.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.8.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.VisualBasic" Version="3.8.0" />
    <PackageReference Include="Mono.Cecil" Version="0.11.3" />
    <PackageReference Include="Neo" Version="3.0.0-CI01194" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Neo.SmartContract.Framework\Neo.SmartContract.Framework.csproj">
      <!--
        The unified Neo domain model defines types with the same fully namespace qualified name
        in different assemblies. Specifying a reference alias allows us to disambiguate types with
        colliding names.
        Official docs: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/extern-alias
        -->
      <Aliases>scfx</Aliases>
    </ProjectReference>
  </ItemGroup>
</Project>
